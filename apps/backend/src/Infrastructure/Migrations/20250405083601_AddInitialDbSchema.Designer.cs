// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250405083601_add initial db schema")]
    partial class AddInitialDbSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Profiles.EmployeeProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean")
                        .HasColumnName("availability");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Mbti")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("mbti");

                    b.Property<string>("PersonalInterests")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("personal_interests");

                    b.Property<int?>("SfiaLevelGeneral")
                        .HasColumnType("integer")
                        .HasColumnName("sfia_level_general");

                    b.Property<string>("Specialization")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("specialization");

                    b.Property<string>("Timezone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("timezone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("VerificationNotes")
                        .HasColumnType("text")
                        .HasColumnName("verification_notes");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("verification_status");

                    b.Property<string>("WorkExperience")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("work_experience");

                    b.HasKey("Id")
                        .HasName("pk_employee_profiles");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_employee_profiles_user_id");

                    b.ToTable("employee_profiles", "public");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.ProfileVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployeeProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_profile_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid")
                        .HasColumnName("reviewer_id");

                    b.Property<int?>("SfiaProposed")
                        .HasColumnType("integer")
                        .HasColumnName("sfia_proposed");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_profile_verifications");

                    b.HasIndex("EmployeeProfileId")
                        .HasDatabaseName("ix_profile_verifications_employee_profile_id");

                    b.HasIndex("ReviewerId")
                        .HasDatabaseName("ix_profile_verifications_reviewer_id");

                    b.ToTable("profile_verifications", "public");
                });

            modelBuilder.Entity("Domain.Entities.Teams.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AiAnalysis")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("ai_analysis");

                    b.Property<int?>("CompatibilityScore")
                        .HasColumnType("integer")
                        .HasColumnName("compatibility_score");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Members")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("members");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("RequiredTechnologies")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("required_technologies");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_teams_creator_id");

                    b.ToTable("teams", "public");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.EmployeeTechnology", b =>
                {
                    b.Property<Guid>("EmployeeProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_profile_id");

                    b.Property<Guid>("TechnologyId")
                        .HasColumnType("uuid")
                        .HasColumnName("technology_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("SfiaLevel")
                        .HasColumnType("integer")
                        .HasColumnName("sfia_level");

                    b.Property<decimal>("YearsExperience")
                        .HasColumnType("numeric(3,1)")
                        .HasColumnName("years_experience");

                    b.HasKey("EmployeeProfileId", "TechnologyId")
                        .HasName("pk_employee_technologies");

                    b.HasIndex("TechnologyId")
                        .HasDatabaseName("ix_employee_technologies_technology_id");

                    b.ToTable("employee_technologies", "public");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.Technology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Version")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_technologies");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_technologies_category_id");

                    b.ToTable("technologies", "public");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.TechnologyCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_technology_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_technology_categories_name");

                    b.ToTable("technology_categories", "public");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("profile_picture_url");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.EmployeeProfile", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithOne("EmployeeProfile")
                        .HasForeignKey("Domain.Entities.Profiles.EmployeeProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_profiles_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.ProfileVerification", b =>
                {
                    b.HasOne("Domain.Entities.Profiles.EmployeeProfile", "EmployeeProfile")
                        .WithMany("Verifications")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profile_verifications_employee_profiles_employee_profile_id");

                    b.HasOne("Domain.Entities.Users.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profile_verifications_users_reviewer_id");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Domain.Entities.Teams.Team", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "Creator")
                        .WithMany("CreatedTeams")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_users_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.EmployeeTechnology", b =>
                {
                    b.HasOne("Domain.Entities.Profiles.EmployeeProfile", "EmployeeProfile")
                        .WithMany("Technologies")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_technologies_employee_profiles_employee_profile_id");

                    b.HasOne("Domain.Entities.Technologies.Technology", "Technology")
                        .WithMany("EmployeeTechnologies")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_technologies_technologies_technology_id");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.Technology", b =>
                {
                    b.HasOne("Domain.Entities.Technologies.TechnologyCategory", "Category")
                        .WithMany("Technologies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_technologies_technology_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.EmployeeProfile", b =>
                {
                    b.Navigation("Technologies");

                    b.Navigation("Verifications");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.Technology", b =>
                {
                    b.Navigation("EmployeeTechnologies");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.TechnologyCategory", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Navigation("CreatedTeams");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
