// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250606044956_ProfileVerificationChanges")]
    partial class ProfileVerificationChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Areas_Roles.EmployeeSpecializedRole", b =>
                {
                    b.Property<Guid>("EmployeeProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_profile_id");

                    b.Property<Guid>("SpecializedRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialized_role_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("level");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("integer")
                        .HasColumnName("years_experience");

                    b.HasKey("EmployeeProfileId", "SpecializedRoleId")
                        .HasName("pk_employee_specialized_roles");

                    b.HasIndex("SpecializedRoleId")
                        .HasDatabaseName("ix_employee_specialized_roles_specialized_role_id");

                    b.ToTable("employee_specialized_roles", "public");
                });

            modelBuilder.Entity("Domain.Entities.Areas_Roles.SpecializedRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("TechnicalAreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("technical_area_id");

                    b.HasKey("Id")
                        .HasName("pk_specialized_roles");

                    b.HasIndex("TechnicalAreaId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_specialized_roles_technical_area_id_name");

                    b.ToTable("specialized_roles", "public");
                });

            modelBuilder.Entity("Domain.Entities.Areas_Roles.SpecializedRoleSkill", b =>
                {
                    b.Property<Guid>("SpecializedRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialized_role_id");

                    b.Property<Guid>("TechnologyId")
                        .HasColumnType("uuid")
                        .HasColumnName("technology_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("MinimumLevel")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_level");

                    b.HasKey("SpecializedRoleId", "TechnologyId")
                        .HasName("pk_specialized_role_skills");

                    b.HasIndex("TechnologyId")
                        .HasDatabaseName("ix_specialized_role_skills_technology_id");

                    b.ToTable("specialized_role_skills", "public");
                });

            modelBuilder.Entity("Domain.Entities.Areas_Roles.TechnicalArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_technical_areas");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_technical_areas_name");

                    b.ToTable("technical_areas", "public");
                });

            modelBuilder.Entity("Domain.Entities.Invitations.InvitationLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<int>("TargetRole")
                        .HasColumnType("integer")
                        .HasColumnName("target_role");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_invitation_links");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_invitation_links_created_by_id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_invitation_links_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_invitation_links_user_id");

                    b.ToTable("invitation_links", "public");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.EmployeeLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployeeProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_profile_id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("language");

                    b.Property<string>("Proficiency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("proficiency");

                    b.HasKey("Id")
                        .HasName("pk_employee_languages");

                    b.HasIndex("EmployeeProfileId")
                        .HasDatabaseName("ix_employee_languages_employee_profile_id");

                    b.ToTable("employee_languages", "public");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.EmployeeProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean")
                        .HasColumnName("availability");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Mbti")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("mbti");

                    b.Property<int>("SfiaLevelGeneral")
                        .HasPrecision(3, 1)
                        .HasColumnType("integer")
                        .HasColumnName("sfia_level_general");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("timezone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("VerificationNotes")
                        .HasColumnType("text")
                        .HasColumnName("verification_notes");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("verification_status");

                    b.HasKey("Id")
                        .HasName("pk_employee_profiles");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_employee_profiles_user_id");

                    b.ToTable("employee_profiles", "public");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.PersonalInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployeeProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_profile_id");

                    b.Property<string>("Frequency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("frequency");

                    b.Property<int?>("InterestLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3)
                        .HasColumnName("interest_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("SessionDurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("session_duration_minutes");

                    b.HasKey("Id")
                        .HasName("pk_personal_interests");

                    b.HasIndex("EmployeeProfileId")
                        .HasDatabaseName("ix_personal_interests_employee_profile_id");

                    b.ToTable("personal_interests", "public");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.ProfileVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployeeProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_profile_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid")
                        .HasColumnName("reviewer_id");

                    b.Property<int?>("SfiaProposed")
                        .HasColumnType("integer")
                        .HasColumnName("sfia_proposed");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_profile_verifications");

                    b.HasIndex("EmployeeProfileId")
                        .HasDatabaseName("ix_profile_verifications_employee_profile_id");

                    b.HasIndex("ReviewerId")
                        .HasDatabaseName("ix_profile_verifications_reviewer_id");

                    b.ToTable("profile_verifications", "public");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<Guid>("EmployeeProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_profile_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.PrimitiveCollection<List<string>>("Frameworks")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("frameworks");

                    b.Property<string>("ProjectManagement")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("project_management");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("project_name");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("responsibilities");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.PrimitiveCollection<List<string>>("ThirdParties")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("third_parties");

                    b.Property<string>("Tools")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tools");

                    b.Property<string>("VersionControl")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("version_control");

                    b.HasKey("Id")
                        .HasName("pk_work_experiences");

                    b.HasIndex("EmployeeProfileId")
                        .HasDatabaseName("ix_work_experiences_employee_profile_id");

                    b.ToTable("work_experiences", "public");
                });

            modelBuilder.Entity("Domain.Entities.Teams.RecommendedMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Analysis")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("analysis");

                    b.Property<int>("CompatibilityScore")
                        .HasColumnType("integer")
                        .HasColumnName("compatibility_score");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_recommended_members");

                    b.ToTable("recommended_members", "public");
                });

            modelBuilder.Entity("Domain.Entities.Teams.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AiAnalysis")
                        .HasColumnType("jsonb")
                        .HasColumnName("ai_analysis");

                    b.Property<double>("CompatibilityScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("compatibility_score");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("WeightCriteria")
                        .HasColumnType("jsonb")
                        .HasColumnName("weight_criteria");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_teams_creator_id");

                    b.ToTable("teams", "public");
                });

            modelBuilder.Entity("Domain.Entities.Teams.TeamMember", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("EmployeeProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_profile_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("boolean")
                        .HasColumnName("is_leader");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<int>("SfiaLevel")
                        .HasColumnType("integer")
                        .HasColumnName("sfia_level");

                    b.HasKey("TeamId", "EmployeeProfileId")
                        .HasName("pk_team_members");

                    b.HasIndex("EmployeeProfileId")
                        .HasDatabaseName("ix_team_members_employee_profile_id");

                    b.ToTable("team_members", "public");
                });

            modelBuilder.Entity("Domain.Entities.Teams.TeamRequiredTechnology", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("TechnologyId")
                        .HasColumnType("uuid")
                        .HasColumnName("technology_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mandatory");

                    b.Property<int>("MinimumSfiaLevel")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_sfia_level");

                    b.HasKey("TeamId", "TechnologyId")
                        .HasName("pk_team_required_technologies");

                    b.HasIndex("TechnologyId")
                        .HasDatabaseName("ix_team_required_technologies_technology_id");

                    b.ToTable("team_required_technologies", "public");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.EmployeeTechnology", b =>
                {
                    b.Property<Guid>("EmployeeProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_profile_id");

                    b.Property<Guid>("TechnologyId")
                        .HasColumnType("uuid")
                        .HasColumnName("technology_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("SfiaLevel")
                        .HasColumnType("integer")
                        .HasColumnName("sfia_level");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<decimal>("YearsExperience")
                        .HasColumnType("numeric(3,1)")
                        .HasColumnName("years_experience");

                    b.HasKey("EmployeeProfileId", "TechnologyId")
                        .HasName("pk_employee_technologies");

                    b.HasIndex("TechnologyId")
                        .HasDatabaseName("ix_employee_technologies_technology_id");

                    b.ToTable("employee_technologies", "public");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.Technology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Version")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_technologies");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_technologies_category_id");

                    b.ToTable("technologies", "public");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.TechnologyCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_technology_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_technology_categories_name");

                    b.ToTable("technology_categories", "public");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("profile_picture_url");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("Domain.Entities.Areas_Roles.EmployeeSpecializedRole", b =>
                {
                    b.HasOne("Domain.Entities.Profiles.EmployeeProfile", "EmployeeProfile")
                        .WithMany("SpecializedRoles")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_specialized_roles_employee_profiles_employee_profi");

                    b.HasOne("Domain.Entities.Areas_Roles.SpecializedRole", "SpecializedRole")
                        .WithMany()
                        .HasForeignKey("SpecializedRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_specialized_roles_specialized_roles_specialized_ro");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("SpecializedRole");
                });

            modelBuilder.Entity("Domain.Entities.Areas_Roles.SpecializedRole", b =>
                {
                    b.HasOne("Domain.Entities.Areas_Roles.TechnicalArea", "TechnicalArea")
                        .WithMany("Roles")
                        .HasForeignKey("TechnicalAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialized_roles_technical_areas_technical_area_id");

                    b.Navigation("TechnicalArea");
                });

            modelBuilder.Entity("Domain.Entities.Areas_Roles.SpecializedRoleSkill", b =>
                {
                    b.HasOne("Domain.Entities.Areas_Roles.SpecializedRole", "SpecializedRole")
                        .WithMany("RequiredSkills")
                        .HasForeignKey("SpecializedRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialized_role_skills_specialized_roles_specialized_role_");

                    b.HasOne("Domain.Entities.Technologies.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialized_role_skills_technologies_technology_id");

                    b.Navigation("SpecializedRole");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("Domain.Entities.Invitations.InvitationLink", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_invitation_links_users_created_by_id");

                    b.HasOne("Domain.Entities.Users.User", null)
                        .WithMany("CreatedInvitations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_invitation_links_users_user_id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.EmployeeLanguage", b =>
                {
                    b.HasOne("Domain.Entities.Profiles.EmployeeProfile", "EmployeeProfile")
                        .WithMany("Languages")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_languages_employee_profiles_employee_profile_id");

                    b.Navigation("EmployeeProfile");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.EmployeeProfile", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "User")
                        .WithOne("EmployeeProfile")
                        .HasForeignKey("Domain.Entities.Profiles.EmployeeProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_profiles_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.PersonalInterest", b =>
                {
                    b.HasOne("Domain.Entities.Profiles.EmployeeProfile", "EmployeeProfile")
                        .WithMany("PersonalInterests")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_personal_interests_employee_profiles_employee_profile_id");

                    b.Navigation("EmployeeProfile");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.ProfileVerification", b =>
                {
                    b.HasOne("Domain.Entities.Profiles.EmployeeProfile", "EmployeeProfile")
                        .WithMany("Verifications")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profile_verifications_employee_profiles_employee_profile_id");

                    b.HasOne("Domain.Entities.Users.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .HasConstraintName("fk_profile_verifications_users_reviewer_id");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.WorkExperience", b =>
                {
                    b.HasOne("Domain.Entities.Profiles.EmployeeProfile", "EmployeeProfile")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_experiences_employee_profiles_employee_profile_id");

                    b.Navigation("EmployeeProfile");
                });

            modelBuilder.Entity("Domain.Entities.Teams.Team", b =>
                {
                    b.HasOne("Domain.Entities.Users.User", "Creator")
                        .WithMany("CreatedTeams")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_users_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.Teams.TeamMember", b =>
                {
                    b.HasOne("Domain.Entities.Profiles.EmployeeProfile", "EmployeeProfile")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_employee_profiles_employee_profile_id");

                    b.HasOne("Domain.Entities.Teams.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_members_teams_team_id");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.Teams.TeamRequiredTechnology", b =>
                {
                    b.HasOne("Domain.Entities.Teams.Team", "Team")
                        .WithMany("RequiredTechnologies")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_required_technologies_teams_team_id");

                    b.HasOne("Domain.Entities.Technologies.Technology", "Technology")
                        .WithMany("TeamRequiredTechnologies")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_team_required_technologies_technologies_technology_id");

                    b.Navigation("Team");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.EmployeeTechnology", b =>
                {
                    b.HasOne("Domain.Entities.Profiles.EmployeeProfile", "EmployeeProfile")
                        .WithMany("Technologies")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_technologies_employee_profiles_employee_profile_id");

                    b.HasOne("Domain.Entities.Technologies.Technology", "Technology")
                        .WithMany("EmployeeTechnologies")
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_technologies_technologies_technology_id");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.Technology", b =>
                {
                    b.HasOne("Domain.Entities.Technologies.TechnologyCategory", "Category")
                        .WithMany("Technologies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_technologies_technology_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Areas_Roles.SpecializedRole", b =>
                {
                    b.Navigation("RequiredSkills");
                });

            modelBuilder.Entity("Domain.Entities.Areas_Roles.TechnicalArea", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Profiles.EmployeeProfile", b =>
                {
                    b.Navigation("Languages");

                    b.Navigation("PersonalInterests");

                    b.Navigation("SpecializedRoles");

                    b.Navigation("TeamMemberships");

                    b.Navigation("Technologies");

                    b.Navigation("Verifications");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Domain.Entities.Teams.Team", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("RequiredTechnologies");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.Technology", b =>
                {
                    b.Navigation("EmployeeTechnologies");

                    b.Navigation("TeamRequiredTechnologies");
                });

            modelBuilder.Entity("Domain.Entities.Technologies.TechnologyCategory", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("Domain.Entities.Users.User", b =>
                {
                    b.Navigation("CreatedInvitations");

                    b.Navigation("CreatedTeams");

                    b.Navigation("EmployeeProfile");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
